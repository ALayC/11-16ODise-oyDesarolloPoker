/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package IU;

import Dominio.Carta;
import Dominio.Participacion;
import Observador.Observable;
import Observador.Observador;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.BorderFactory;
import javax.swing.DefaultListModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import panelCartasPoker.CartaPoker;
import panelCartasPoker.PanelCartasListener;
import panelCartasPoker.PanelCartasPokerException;
import panelCartasPoker.PanelCartasPoker;

/**
 *
 * @author Santiago
 */
public class DialogPanelCartas extends javax.swing.JDialog implements PanelCartasListener, Observador {

    private Participacion participacion;
    private JLabel lblNumeroMesa;
    private JLabel lblNumeroMano;
    private JLabel lblFiguraAlta;
    private JLabel lblPozo;
    private javax.swing.JList<String> lstJugadores;
    private javax.swing.JList<String> lstFiguras;
    private JList<String> listaJugadores;
    private DefaultListModel<String> modeloJugadores;
    private JList<String> listaFigurasDisponibles;
    private DefaultListModel<String> modeloFiguras;
    private javax.swing.JButton btnConfirmarCambio;
    private List<CartaPoker> cartasSeleccionadas = new ArrayList<>();

    public DialogPanelCartas(java.awt.Frame parent, Participacion participacion) {
        super(parent);
        this.participacion = participacion; // Asocia la participación
        initComponents(); // Inicializa los componentes básicos
        configurarVistaAdicional(); // Configura los nuevos componentes
        setTitle("Jugador: " + participacion.getUnJugador().getNombreCompleto()
                + " | Saldo: $" + participacion.getUnJugador().getSaldo());
        cargarCartas(new ArrayList<>(participacion.getCartas())); // Carga inicial de cartas
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelCartasPoker1 = new panelCartasPoker.PanelCartasPoker();
        btnPasar = new javax.swing.JButton();
        btnApostar = new javax.swing.JButton();
        btnPagar = new javax.swing.JButton();
        btnRetirarse = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnPasar.setText("Pasar");

        btnApostar.setText("Apostar");

        btnPagar.setText("Pagar");
        btnPagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPagarActionPerformed(evt);
            }
        });

        btnRetirarse.setText("Salir");
        btnRetirarse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRetirarseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(panelCartasPoker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(262, 262, 262)
                        .addComponent(btnPasar)
                        .addGap(66, 66, 66)
                        .addComponent(btnApostar)
                        .addGap(64, 64, 64)
                        .addComponent(btnPagar)
                        .addGap(66, 66, 66)
                        .addComponent(btnRetirarse)))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(94, 94, 94)
                .addComponent(panelCartasPoker1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPasar)
                    .addComponent(btnApostar)
                    .addComponent(btnPagar)
                    .addComponent(btnRetirarse))
                .addGap(36, 36, 36))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPagarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnPagarActionPerformed

    private void btnRetirarseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRetirarseActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnRetirarseActionPerformed

    /**
     * @param args the command line arguments
     */
    private void habilitarPanelActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        panelCartasPoker1.setEnabled(habilitarPanel.isSelected());
    }

    private void checkListenerActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        if (checkListener.isSelected()) {
            panelCartasPoker1.setListener(this);
        } else {
            panelCartasPoker1.setListener(null);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApostar;
    private javax.swing.JButton btnPagar;
    private javax.swing.JButton btnPasar;
    private javax.swing.JButton btnRetirarse;
    private panelCartasPoker.PanelCartasPoker panelCartasPoker1;
    // End of variables declaration//GEN-END:variables

    private javax.swing.JCheckBox checkListener;
    private javax.swing.JCheckBox habilitarPanel;
    private javax.swing.JLabel jLabel1;

    public void cargarCartas(ArrayList<CartaPoker> cartas) {
        try {
            panelCartasPoker1.cargarCartas(cartas);
        } catch (PanelCartasPokerException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    @Override
    public void clickEnCarta(CartaPoker carta) {
        JOptionPane.showMessageDialog(this, carta.toString(), "Click en carta", JOptionPane.INFORMATION_MESSAGE);
        if (carta.estaVisible()) {
            if (cartasSeleccionadas.contains(carta)) {
                cartasSeleccionadas.remove(carta);
            } else {
                cartasSeleccionadas.add(carta);
            }
        }
        JOptionPane.showMessageDialog(this, carta.toString(), "Click en carta", JOptionPane.INFORMATION_MESSAGE);
    }

    public javax.swing.JButton getBtnPasar() {
        return btnPasar;
    }

    public javax.swing.JButton getBtnApostar() {
        return btnApostar;
    }

    public javax.swing.JButton getBtnPagar() {
        return btnPagar;
    }

    public javax.swing.JButton getBtnRetirarse() {
        return btnRetirarse;
    }

    @Override
    public void actualizar(Observable origen, Object evento) {
        if (origen == participacion) {
            actualizarVista();
        }
    }

    private void actualizarVista() {
        setTitle((participacion.estaActivo() ? "JUGANDO: " : "ESPERANDO: ")
                + participacion.getUnJugador().getNombreCompleto()
                + " | Saldo: $" + participacion.getSaldoInicial());
        cargarCartas(new ArrayList<>(participacion.getCartas()));
    }

    public Participacion getParticipacion() {
        return participacion;
    }

    public void actualizarDatosVista(int numeroMesa, int numeroMano, String figuraAlta, double pozo, List<String> jugadores, List<String> figurasDisponibles) {
        lblNumeroMesa.setText("Mesa: " + numeroMesa);
        lblNumeroMano.setText("Mano: " + numeroMano);
        lblFiguraAlta.setText("Figura alta: " + figuraAlta);
        lblPozo.setText("Pozo: $" + pozo);

        modeloJugadores.clear();
        jugadores.forEach(modeloJugadores::addElement);

        modeloFiguras.clear();
        figurasDisponibles.forEach(modeloFiguras::addElement);
    }

    private void configurarVistaAdicional() {

        lblNumeroMesa = new JLabel("Mesa: -");
        lblNumeroMano = new JLabel("Mano: -");
        lblFiguraAlta = new JLabel("Figura alta: -");
        lblPozo = new JLabel("Pozo: $0");

        modeloJugadores = new DefaultListModel<>();
        listaJugadores = new JList<>(modeloJugadores);
        listaJugadores.setBorder(BorderFactory.createTitledBorder("Jugadores en la mesa"));

        modeloFiguras = new DefaultListModel<>();
        listaFigurasDisponibles = new JList<>(modeloFiguras);
        listaFigurasDisponibles.setBorder(BorderFactory.createTitledBorder("Figuras disponibles"));

        JScrollPane scrollJugadores = new JScrollPane(listaJugadores);
        JScrollPane scrollFiguras = new JScrollPane(listaFigurasDisponibles);

        btnConfirmarCambio = new JButton("Confirmar Cambio");
        btnConfirmarCambio.addActionListener(e -> manejarConfirmarCambio());

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);

        layout.setAutoCreateGaps(true);
        layout.setAutoCreateContainerGaps(true);

        layout.setHorizontalGroup(
                layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(lblNumeroMesa)
                                .addGap(20)
                                .addComponent(lblNumeroMano)
                                .addGap(20)
                                .addComponent(lblFiguraAlta)
                                .addGap(20)
                                .addComponent(lblPozo))
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(scrollJugadores, GroupLayout.PREFERRED_SIZE, 250, GroupLayout.PREFERRED_SIZE)
                                .addGap(20)
                                .addComponent(scrollFiguras, GroupLayout.PREFERRED_SIZE, 250, GroupLayout.PREFERRED_SIZE))
                        .addComponent(panelCartasPoker1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(btnPasar)
                                .addGap(20)
                                .addComponent(btnApostar)
                                .addGap(20)
                                .addComponent(btnPagar)
                                .addGap(20)
                                .addComponent(btnConfirmarCambio)
                                .addGap(20)
                                .addComponent(btnRetirarse))
        );

        layout.setVerticalGroup(
                layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(lblNumeroMesa)
                                .addComponent(lblNumeroMano)
                                .addComponent(lblFiguraAlta)
                                .addComponent(lblPozo))
                        .addGap(20)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                .addComponent(scrollJugadores, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE)
                                .addComponent(scrollFiguras, GroupLayout.PREFERRED_SIZE, 150, GroupLayout.PREFERRED_SIZE))
                        .addGap(20)
                        .addComponent(panelCartasPoker1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                        .addGap(20)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(btnPasar)
                                .addComponent(btnApostar)
                                .addComponent(btnPagar)
                                .addComponent(btnConfirmarCambio)
                                .addComponent(btnRetirarse))
        );

        pack();
        setLocationRelativeTo(null);
    }

    private void manejarConfirmarCambio() {
        if (cartasSeleccionadas.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Seleccione al menos una carta para cambiar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
            return;
        }

        List<Carta> cartasAIntercambiar = cartasSeleccionadas.stream()
                .map(cartaPoker -> new Carta(cartaPoker.getValorCarta(), cartaPoker.getPaloCarta()))
                .collect(Collectors.toList());

        participacion.intercambiarCartas(cartasAIntercambiar);

        JOptionPane.showMessageDialog(this, "Cartas cambiadas exitosamente.", "Confirmación", JOptionPane.INFORMATION_MESSAGE);

        cargarCartas(new ArrayList<>(participacion.getCartas()));

        cartasSeleccionadas.clear();
    }

    public PanelCartasPoker getPanelCartasPoker() {
        return panelCartasPoker1;
    }

}
