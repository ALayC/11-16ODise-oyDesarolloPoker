/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package IU;

import Controladores.ControlMesa;
import Dominio.Jugador;
import Dominio.Mesa;

import Interfaces.VistaControlMesa;
import Servicios.Fachada;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import java.util.List;
import java.util.Observable;

public class VistaJugador extends javax.swing.JFrame implements VistaControlMesa {

    private ControlMesa controlMesa;
    private final Fachada f = Fachada.getInstancia();
    private Jugador usuarioConectado;

    public VistaJugador(Jugador jugador) {
        initComponents();
        this.usuarioConectado = jugador;
        this.controlMesa = new ControlMesa(this);
        setTitle(jugador.getNombreCompleto() + " | " + jugador.getSaldo());
        cargarMesasAbiertas();
    }

    private void cargarMesasAbiertas() {
        DefaultListModel<String> model = new DefaultListModel<>();

        // Obtiene las mesas abiertas de la fachada
        for (Mesa mesa : Fachada.getInstancia().getMesas()) {
            if ("Abierta".equals(mesa.getEstado().toString())) {
                // Agrega cada mesa en el formato adecuado para mostrar en la lista
                model.addElement(
                        mesa.getNumeroMesa() + " - "
                        + "Jugadores actuales: " + mesa.getCantidadActualJugadores() + " - "
                        + "Jugadores requeridos: " + mesa.getCantidadJugadores() + " - "
                        + "Apuesta base: " + mesa.getApuestaBase() + " - "
                        + "Porcentaje Comisión: " + mesa.getPorcentajeComision()
                );
            }
        }

        // Establece el modelo en el JList
        jList1.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        lblListado = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();
        btnSeleccionarMesa = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane1.setViewportView(jList1);

        lblListado.setText("Listado de Mesas");

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        btnSeleccionarMesa.setText("Seleccionar mesa");
        btnSeleccionarMesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarMesaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 518, Short.MAX_VALUE)
                        .addComponent(btnLogout))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(238, 238, 238)
                                .addComponent(lblListado))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(227, 227, 227)
                                .addComponent(btnSeleccionarMesa))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblListado)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSeleccionarMesa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addComponent(btnLogout)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        logout();
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnSeleccionarMesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarMesaActionPerformed
        int numeroMesa = obtenerNumeroMesaSeleccionada();
        if (numeroMesa == -1) {
            return;
        }

        controlMesa.ingresarMesa(usuarioConectado, numeroMesa);
        dispose();
    }//GEN-LAST:event_btnSeleccionarMesaActionPerformed

    private int obtenerNumeroMesaSeleccionada() {
        String selectedValue = jList1.getSelectedValue();
        if (selectedValue == null) {
            mostrarError("Por favor, selecciona una mesa.");
            return -1;
        }

        try {
            return Integer.parseInt(selectedValue.split(" ")[0]);
        } catch (NumberFormatException e) {
            mostrarError("Formato de número de mesa inválido.");
            return -1;
        }
    }

    public void actualizar(Observable origen, Object evento) {
        if (evento instanceof String && ((String) evento).contains("mesa")) {
            cargarMesasAbiertas();  // Recarga la lista de mesas cuando hay cambios
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnSeleccionarMesa;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblListado;
    // End of variables declaration//GEN-END:variables

    private void logout() {
        Fachada.getInstancia().quitar(usuarioConectado);
        dispose();
    }

    @Override
    public void cargarMesas(List<Mesa> mesas) {
        DefaultListModel<String> model = new DefaultListModel<>();
        for (Mesa mesa : mesas) {
            if ("Abierta".equals(mesa.getEstado())) {
                model.addElement(mesa.getNumeroMesa() + " - Jugadores: "
                        + mesa.getCantidadActualJugadores() + "/"
                        + mesa.getCantidadJugadores() + " - Apuesta Base: $"
                        + mesa.getApuestaBase());
            }
        }
        jList1.setModel(model);
    }

    @Override
    public void mostrarMensaje(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje);
    }

    @Override
    public void mostrarError(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
    }
}
